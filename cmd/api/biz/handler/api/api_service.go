// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/hcdoit/tiktok/cmd/api/biz/rpc"
	"github.com/hcdoit/tiktok/kitex_gen/user"
	"github.com/hcdoit/tiktok/pkg/errno"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "github.com/hcdoit/tiktok/cmd/api/biz/model/api"
)

// Register .
// @router /douyin/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, errno.ParamErr)
		return
	}

	resp, err := rpc.Register(ctx, &user.UserRegisterRequest{
		Username: c.Query("username"),
		Password: c.Query("password"),
	})

	if err != nil {
		c.JSON(consts.StatusInternalServerError, errno.ServiceErr)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /douyin/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {

	var err error
	var req api.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, errno.ParamErr)
		return
	}
	resp, err := rpc.Login(ctx, &user.UserLoginRequest{
		Username: c.Query("username"),
		Password: c.Query("password"),
	})
	if err != nil {
		c.JSON(consts.StatusInternalServerError, errno.ServiceErr)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUser .
// @router /douyin/user [POST]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(consts.StatusBadRequest, errno.ParamErr)
		return
	}
	userid, err := strconv.Atoi(c.Query("user_id"))
	if err != nil {
		c.JSON(consts.StatusBadRequest, errno.ParamErr)
		return
	}
	resp, err := rpc.GetUser(ctx, &user.GetUserRequest{
		UserId: int64(userid),
		Token:  c.Query("token"),
	})
	if err != nil {
		c.JSON(consts.StatusBadRequest, errno.ParamErr)
		return
	}

	c.JSON(consts.StatusOK, resp)
}
